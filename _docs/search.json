[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "ohawf",
    "section": "",
    "text": "source\n\nget\n\n get (pkl=False, cli=False, scopes=False, file=False)\n\nAllows simplified ohawf.get() API\n\nsource\n\n\nCredentials\n\n Credentials ()\n\nLogin to Google services.\n\n# Default behavior causes run_local_server InstalledAppFlow\n\ncreds = get()\n\n\n# Server behavior causes run_console InstalledAppFlow\n# This approach is deprecated by Google but can be white-listed on a per-user basis\n# at https://console.cloud.google.com/ (you'd have to re-wire it to yours)\n\ncreds = get(cli=True)\n\n\n# You can rename your crendentials.pkl file and select it later\n\ncreds = get(\"renamed_credentials.pkl\")\n\n\n# If you registerred as a developer at https://console.cloud.google.com/\n# then you can download an OAuth Client json file at console.cloud.google.com / \n# Projects / APIs & Services / Credentials / OAuth 2.0 Client IDs\n\ncreds = get(file=\"client_secret.json\")\n\nLogging in... Successfully logged in as m*****************@gmail.com\n\n\n\n# Retrieve list of Search Console sites\ngsc_service = build(\"webmasters\", \"v3\", credentials=cred)\ngsc_sites = gsc_service.sites().list().execute()\n[print(x[\"siteUrl\"]) for x in gsc_sites[\"siteEntry\"]]\n\n\n# Retreive list of Google Analytics accounts\nga_service = build(\"analytics\", \"v3\", credentials=cred)\nga_accounts = ga_service.management().accounts().list().execute()\n[print((x[\"id\"], x[\"name\"])) for x in ga_accounts[\"items\"]]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ohawf",
    "section": "",
    "text": "pip install -U ohawf\nAre you trying to log into Google Analytics, Search Console, or even Google Photos from a Jupyter Notebook? Does all the advice telling you to register as a developer and the mangled Google examples have you frustrated? Well then, ohawf is for you."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "ohawf",
    "section": "How to use",
    "text": "How to use\nimport ohawf\n\ncreds = ohawf.get()\n\nWhy So Easy?\nGoogle OAuth2 woes go away once you can use the authentication scheme that pops up the same “login as Google” web-prompt that all Mobile and Web apps seem to be using these days. It doesn’t seem possible, but this authentication scheme actually works from a Jupyter Notebook in JupyterLab.\nOhawf makes JupyterLab behave like an installed app, so that when you first run creds= ohawf.get(), you’ll be presented with the “Login with Google” prompt. Just just wait a moment, it will pop up a window separate from JupyterLab’s own, and let you log in then prompt you to close the window. If not, Drink Me.\n\n\nA Tale of 2 Installed App Flows\nWhat makes ohawf work is this line:\nfrom google_auth_oauthlib.flow import InstalledAppFlow\n\nThe Old Way: Copy/Paste Token\nInstalledAppFlow’s run_console() prompts you to copy/paste a token from a browser tab to Jupyter and used to work well, but that approach has been deprecated. It can still be forced to work, but it’s not so easy.\n\n\nThe New Way: Gotta Have a Webserver\nThe new way which is now the ohawf default is run_local_server(). This is what you encounter all the time with mobile apps when you see “Login with Google”. An embedded browser pops up, goes through login, then returns you to the mobile app. This works in Jupyter too. If you have problems, run Jupyter this way. And if you need to force ohawf to use run_console() for a server installation, you can do this:\nimport ohawf\ncreds = ohawf.get(cli=True)\nBut then you’ll have to whitelist your email address, and you can only do that through the Google Cloud Console so chicken-and-egg. If you have to go that route, consider just registering as a Google developer and downloading a OAuth Client secret json file like this:\n\nGo to https://console.cloud.google.com\nMake sure you’re in the correct Google account.\nCreate a new Project.\nGo to API & Services.\nEnable the APIs & Services you want to use.\nGo to Credentials.\nCreate a new OAuth 2.0 Client IDs of the Desktop App type.\nGo to OAuth consent screen and set it up.\nGo to +Add users, under test users (gets around tight security)\nAdd the users for the test (your gmail, necessary even though already the app owner)\nGo back to Credentials and download OAuth Client.\n\nTypically, client_secret_[secret].apps.googleusercontent.com.json\n\nUse that file with ohawf\n\nOnce you have the Client Secret JSON file, you can call ohawf like this:\nimport ohawf\n\ncreds = ohawf.get(file=\"client_secret.json\")\n\n\n\nAdding Scopes\nThe ohawf package uses the following default scopes if you don’t set any:\nhttps://www.googleapis.com/auth/spreadsheets\nhttps://www.googleapis.com/auth/gmail.modify\nhttps://www.googleapis.com/auth/userinfo.email\nhttps://www.googleapis.com/auth/youtube.readonly\nhttps://www.googleapis.com/auth/analytics.readonly\nhttps://www.googleapis.com/auth/webmasters.readonly\nhttps://www.googleapis.com/auth/yt-analytics.readonly\nhttps://www.googleapis.com/auth/photoslibrary.readonly\nIf you want to set your own scopes, create a Python list of scopes and feed it to ohawf:\nscopes = [\"https://www.googleapis.com/auth/spreadsheets\"]\ncreds = ohawf(scopes=scopes)"
  },
  {
    "objectID": "index.html#google-services",
    "href": "index.html#google-services",
    "title": "ohawf",
    "section": "Google Services",
    "text": "Google Services\nfrom apiclient.discovery import build\nConnect to Google services by giving build any (activated) API name, version and credentials such listing your GSC sites:\ngsc_service = build('searchconsole', 'v1', credentials=cred)\ngsc_sites = gsc_service.sites().list().execute()\n[print(x['siteUrl']) for x in gsc_sites['siteEntry']];\n…or this go list your GA accounts:\nga_service = build('analytics', 'v3', credentials=cred)\nga_accounts = ga_service.management().accounts().list().execute()\n[print((x['id'], x['name'])) for x in ga_accounts['items']];"
  },
  {
    "objectID": "index.html#copyright-c-2023-mike-levin",
    "href": "index.html#copyright-c-2023-mike-levin",
    "title": "ohawf",
    "section": "Copyright (c) 2023 Mike Levin",
    "text": "Copyright (c) 2023 Mike Levin\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "index.html#last-updated-december-31-2022",
    "href": "index.html#last-updated-december-31-2022",
    "title": "ohawf",
    "section": "Last updated: December 31, 2022",
    "text": "Last updated: December 31, 2022\nThis app does not collect nor use any of Your Personal data."
  }
]